{
  "version": 3,
  "sources": ["../src/main.ts"],
  "sourcesContent": ["/*\n * Created with @iobroker/create-adapter v2.1.1\n */\n\n// The adapter-core module gives you access to the core ioBroker functions\n// you need to create an adapter\nimport * as utils from '@iobroker/adapter-core';\n\n// Load your modules here, e.g.:\n// import * as fs from \"fs\";\n\n// TODO: get position from system config (see lovelace)\n// TODO: use suncalc to get sun position from it in a interval ( getPosition with just a new Date() and lat, lon ).\n// TODO: build UI\n// TODO: react on shutters\n// TODO: react on thermometer\n// TODO: react on weather forecast\n\nclass Autoshadow extends utils.Adapter {\n\n    public constructor(options: Partial<utils.AdapterOptions> = {}) {\n        super({\n            ...options,\n            name: 'autoshadow',\n        });\n        this.on('ready', this.onReady.bind(this));\n        this.on('stateChange', this.onStateChange.bind(this));\n        // this.on('objectChange', this.onObjectChange.bind(this));\n        // this.on('message', this.onMessage.bind(this));\n        this.on('unload', this.onUnload.bind(this));\n    }\n\n    /**\n     * Is called when databases are connected and adapter received configuration.\n     */\n    private async onReady(): Promise<void> {\n        // Initialize your adapter here\n\n        console.log('Starting...');\n\n        const subScribePromises: Array<Promise<void>> = [];\n        for (const shutter of this.config.shutters) {\n            subScribePromises.push(this.subscribeForeignStatesAsync(shutter.id));\n            if (shutter.windowContact) {\n                subScribePromises.push(this.subscribeForeignStatesAsync(shutter.windowContact.id));\n            }\n        }\n        await Promise.all(subScribePromises);\n    }\n\n    /**\n     * Is called when adapter shuts down - callback has to be called under any circumstances!\n     */\n    private onUnload(callback: () => void): void {\n        try {\n            // Here you must clear all timeouts or intervals that may still be active\n            // clearTimeout(timeout1);\n            // clearTimeout(timeout2);\n            // ...\n            // clearInterval(interval1);\n\n            callback();\n        } catch (e) {\n            callback();\n        }\n    }\n\n    // If you need to react to object changes, uncomment the following block and the corresponding line in the constructor.\n    // You also need to subscribe to the objects with `this.subscribeObjects`, similar to `this.subscribeStates`.\n    // /**\n    //  * Is called if a subscribed object changes\n    //  */\n    // private onObjectChange(id: string, obj: ioBroker.Object | null | undefined): void {\n    //     if (obj) {\n    //         // The object was changed\n    //         this.log.info(`object ${id} changed: ${JSON.stringify(obj)}`);\n    //     } else {\n    //         // The object was deleted\n    //         this.log.info(`object ${id} deleted`);\n    //     }\n    // }\n\n    /**\n     * Is called if a subscribed state changes\n     */\n    private onStateChange(id: string, state: ioBroker.State | null | undefined): void {\n        console.log('Test');\n        if (state) {\n            // The state was changed\n            this.log.info(`state ${id} changed: ${state.val} (ack = ${state.ack})`);\n        } else {\n            // The state was deleted\n            this.log.info(`state ${id} deleted`);\n        }\n    }\n\n    // If you need to accept messages in your adapter, uncomment the following block and the corresponding line in the constructor.\n    // /**\n    //  * Some message was sent to this instance over message box. Used by email, pushover, text2speech, ...\n    //  * Using this method requires \"common.messagebox\" property to be set to true in io-package.json\n    //  */\n    // private onMessage(obj: ioBroker.Message): void {\n    //     if (typeof obj === 'object' && obj.message) {\n    //         if (obj.command === 'send') {\n    //             // e.g. send email or pushover or whatever\n    //             this.log.info('send command');\n\n    //             // Send response in callback if required\n    //             if (obj.callback) this.sendTo(obj.from, obj.command, 'Message received', obj.callback);\n    //         }\n    //     }\n    // }\n\n}\n\nif (require.main !== module) {\n    // Export the constructor in compact mode\n    module.exports = (options: Partial<utils.AdapterOptions> | undefined) => new Autoshadow(options);\n} else {\n    // otherwise start the instance directly\n    (() => new Autoshadow())();\n}"],
  "mappings": ";;;;;;;;;;;;;;;;AAMA,YAAuB;AAYvB,MAAM,mBAAmB,MAAM,QAAQ;AAAA,EAEnC,AAAO,YAAY,UAAyC,CAAC,GAAG;AAC5D,UAAM;AAAA,MACF,GAAG;AAAA,MACH,MAAM;AAAA,IACV,CAAC;AACD,SAAK,GAAG,SAAS,KAAK,QAAQ,KAAK,IAAI,CAAC;AACxC,SAAK,GAAG,eAAe,KAAK,cAAc,KAAK,IAAI,CAAC;AAGpD,SAAK,GAAG,UAAU,KAAK,SAAS,KAAK,IAAI,CAAC;AAAA,EAC9C;AAAA,EAKA,MAAc,UAAyB;AAGnC,YAAQ,IAAI,aAAa;AAEzB,UAAM,oBAA0C,CAAC;AACjD,eAAW,WAAW,KAAK,OAAO,UAAU;AACxC,wBAAkB,KAAK,KAAK,4BAA4B,QAAQ,EAAE,CAAC;AACnE,UAAI,QAAQ,eAAe;AACvB,0BAAkB,KAAK,KAAK,4BAA4B,QAAQ,cAAc,EAAE,CAAC;AAAA,MACrF;AAAA,IACJ;AACA,UAAM,QAAQ,IAAI,iBAAiB;AAAA,EACvC;AAAA,EAKA,AAAQ,SAAS,UAA4B;AACzC,QAAI;AAOA,eAAS;AAAA,IACb,SAAS,GAAP;AACE,eAAS;AAAA,IACb;AAAA,EACJ;AAAA,EAoBA,AAAQ,cAAc,IAAY,OAAgD;AAC9E,YAAQ,IAAI,MAAM;AAClB,QAAI,OAAO;AAEP,WAAK,IAAI,KAAK,SAAS,eAAe,MAAM,cAAc,MAAM,MAAM;AAAA,IAC1E,OAAO;AAEH,WAAK,IAAI,KAAK,SAAS,YAAY;AAAA,IACvC;AAAA,EACJ;AAmBJ;AAEA,IAAI,QAAQ,SAAS,QAAQ;AAEzB,SAAO,UAAU,CAAC,YAAuD,IAAI,WAAW,OAAO;AACnG,OAAO;AAEH,EAAC,OAAM,IAAI,WAAW,GAAG;AAC7B;",
  "names": []
}
